generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  INVITED
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}

enum TransactionStatus {
  KEEP
  CANCEL
  CONSIDER
}

model User {
  id              String            @id @default(cuid())
  email           String            @unique
  passwordHash    String?
  firstName       String?
  lastName        String?
  phone           String?
  role            UserRole          @default(CUSTOMER)
  status          UserStatus        @default(INVITED)
  emailVerified   Boolean           @default(false)
  mfaEnabled      Boolean           @default(false)
  mfaSecret       String?
  image           String?
  
  // Advisory client specific field
  advisorId       String?           // Assigned financial advisor (if they're a client)
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  advisor         Advisor?          @relation(fields: [advisorId], references: [id])
  accounts        Account[]
  sessions        Session[]
  userGroups      UserGroup[]
  transactions    Transaction[]
  bankStatements  BankStatement[]
  activityLogs    ActivityLog[]
  invitations     Invitation[]
  toolAccess      UserToolAccess[]
  spendingAnalyses SpendingAnalysis[]
  bankConnections BankConnection[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Group {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  riskLevel   RiskLevel?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  userGroups  UserGroup[]
  groupTools  GroupTool[]
}

model UserGroup {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model Tool {
  id          String           @id @default(cuid())
  name        String           @unique
  slug        String           @unique
  description String?
  config      Json?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  groupTools  GroupTool[]
  userAccess  UserToolAccess[]
}

model GroupTool {
  id          String   @id @default(cuid())
  groupId     String
  toolId      String
  permissions Json?
  createdAt   DateTime @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  tool  Tool  @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@unique([groupId, toolId])
}

model UserToolAccess {
  id          String   @id @default(cuid())
  userId      String
  toolId      String
  permissions Json?
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tool Tool @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@unique([userId, toolId])
}

model Category {
  id           String        @id @default(cuid())
  name         String        @unique
  parentId     String?
  color        String?
  icon         String?
  isSystem     Boolean       @default(false)
  createdAt    DateTime      @default(now())

  // Self-relation for subcategories
  parent       Category?     @relation("CategoryToCategory", fields: [parentId], references: [id])
  subcategories Category[]   @relation("CategoryToCategory")

  // Relations
  transactions Transaction[]
}

model BankStatement {
  id          String        @id @default(cuid())
  userId      String
  analysisId  String?       // Link to spending analysis session
  filename    String
  fileUrl     String?
  uploadedAt  DateTime      @default(now())
  processedAt DateTime?
  status      String        @default("pending")

  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  analysis     SpendingAnalysis? @relation(fields: [analysisId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id              String            @id @default(cuid())
  userId          String
  bankStatementId String?
  date            DateTime
  description     String
  amount          Decimal           @db.Decimal(10, 2)
  merchant        String?
  categoryId      String?
  status          TransactionStatus?
  notes           String?
  aiConfidence    Float?
  originalData    Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  category      Category?      @relation(fields: [categoryId], references: [id])
  bankStatement BankStatement? @relation(fields: [bankStatementId], references: [id])

  @@index([userId, date])
  @@index([categoryId])
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  entityType  String?
  entityId    String?
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model Invitation {
  id          String    @id @default(cuid())
  email       String
  token       String    @unique @default(cuid())
  invitedBy   String
  expiresAt   DateTime
  acceptedAt  DateTime?
  createdAt   DateTime  @default(now())

  inviter User @relation(fields: [invitedBy], references: [id])

  @@index([email])
  @@index([token])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SpendingAnalysis {
  id            String   @id @default(cuid())
  userId        String
  name          String   // User-defined instance name
  status        String   @default("processing") // processing, completed, failed
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  statements    BankStatement[]
  insights      SpendingInsight[]
}

model SpendingInsight {
  id            String   @id @default(cuid())
  analysisId    String
  type          String   // category_breakdown, subscription, pattern, savings_opportunity
  data          Json     // Flexible JSON for different insight types
  period        String?  // week, month, quarter, year
  createdAt     DateTime @default(now())

  analysis      SpendingAnalysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
}

model Advisor {
  id                String   @id @default(cuid())
  firstName         String
  lastName          String
  email             String   @unique
  phone             String?
  title             String?  // e.g., "Senior Financial Advisor, CFA"
  credentials       String?  // e.g., "CFA, CFP"
  bio               String?
  specialties       String[] // e.g., ["Retirement Planning", "Tax Optimization", "Investment Strategy"]
  yearsExperience   Int?
  profileImageUrl   String?
  calendlyUrl       String?  // For scheduling
  availableHours    Json?    // Store availability schedule
  rating            Float?   @default(4.9)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  clients           User[]   // All users assigned to this advisor
}

model BankConnection {
  id                String   @id @default(cuid())
  userId            String
  basiqUserId       String   // Basiq user ID
  basiqConnectionId String   // Basiq connection ID
  institutionId     String
  institutionName   String
  status            String   @default("pending") // pending, active, failed, disconnected
  lastSyncedAt      DateTime?
  consentExpiresAt  DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accounts          BankAccount[]

  @@index([userId])
  @@index([basiqUserId])
}

model BankAccount {
  id                String   @id @default(cuid())
  connectionId      String
  basiqAccountId    String   @unique
  accountNumber     String   // Last 4 digits only for security
  accountName       String
  accountType       String   // savings, transaction, credit
  balance           Float?
  availableBalance  Float?
  currency          String   @default("AUD")
  institution       String
  lastUpdated       DateTime?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  connection        BankConnection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  transactions      BankTransaction[]

  @@index([connectionId])
  @@index([basiqAccountId])
}

model BankTransaction {
  id                String   @id @default(cuid())
  accountId         String
  basiqTransactionId String  @unique
  description       String
  amount            Float
  balance           Float?
  transactionDate   DateTime
  postDate          DateTime?
  category          String?
  subCategory       String?
  merchantName      String?
  direction         String   // credit, debit
  status            String   // pending, posted
  rawData           Json?    // Store original Basiq data
  createdAt         DateTime @default(now())

  account           BankAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([transactionDate])
  @@index([basiqTransactionId])
}
